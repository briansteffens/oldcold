#!/usr/bin/env python3

import sys, os, argparse
from multiprocessing import Pool, Queue, Process
from itertools import permutations, combinations, chain, product

from cold import *

solution_queue = Queue()
program_queue = Queue()

def thread_runner(job):
	global program_queue, solution_queue
	try:
		context = Context(job)
		while True:
			m = program_queue.get()
			if m["msg"] == "end":
				solution_queue.put({"msg": "done","programs_generated": context.stat_states})
				return
			if m["msg"] == "run":
				for solution in context.run(m["sources"]):
					solution_queue.put({"msg": "solution","solution": solution})
	except Exception as e:
		print(e)
def thread_assembler(job, ppt, threads):
	global program_queue
	try:
		batch = []
		i = 0
		for program_source in Assembler.assemble(job):
			batch.append(program_source)
			i += 1
			if i >= int(ppt):
				program_queue.put({"msg": "run","sources": batch})
				batch = []
				i = 0
		if len(batch) > 0: program_queue.put({"msg": "run","sources": batch})
		for i in range(threads):
			program_queue.put({"msg": "end"})
	except Exception as e:
		print(e)
if __name__ == "__main__":
	parser = argparse.ArgumentParser()
	parser.add_argument("-j", "--job", default=None, help="Cold job file")
	parser.add_argument("-f", "--file", default=None, help="Cold code file")
	parser.add_argument("-s", "--stats", default=True, help="Print stats")
	parser.add_argument("-p1", "--p1", default="7", help="Parameter to pass into .cold file")
	parser.add_argument("-t", "--threads", default=1, help="Number of threads to use")
	parser.add_argument("-ppt", "--programsperthread", default=1, help="Number of programs each thread should process")
	args = parser.parse_args(sys.argv[1:])

	if args.job is not None and args.file is not None:
		print("--job and --file are mutually exclusive.")
		exit()
	elif args.job is not None:
		with open(args.job) as f:
			job = Job.create(f.read())
		
		t_assembler = Process(target=thread_assembler,args=(job,int(args.programsperthread),int(args.threads)))
		t_assembler.daemon = True
		t_assembler.start()
		
		threads = []
		for i in range(int(args.threads)):		
			t = Process(target=thread_runner,args=(job,))
			t.daemon = True
			t.start()
			threads.append(t)
		
		done = 0
		programs_generated = 0
		solutions = []
		while done < len(threads):
			item = solution_queue.get()
			if item["msg"] == "done":
				done += 1
				programs_generated += item["programs_generated"]
			if item["msg"] == "solution":
				solutions.append(item["solution"])
				print(item["solution"])
				print("-----")
		
		for t in threads:
			t.join()
		
		print("STATS")
		print("\tprograms generated: " + str(programs_generated))
		print("\tsolutions: " + str(len(solutions)))
		
		exit(0)
		
	elif args.file is not None:
		with open(args.file) as f:
			codefile = f.read()
		print(str(args.p1) + " => " + str(run_linear(codefile, int(args.p1))))
	else:
		print("--job or --file are required.")
		exit()




